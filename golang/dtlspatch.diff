diff --git a/config.go b/config.go
index fbc3ee2..9798465 100644
--- a/config.go
+++ b/config.go
@@ -199,7 +199,7 @@ var defaultCurves = []elliptic.Curve{elliptic.X25519, elliptic.P256, elliptic.P3
 
 // PSKCallback is called once we have the remote's PSKIdentityHint.
 // If the remote provided none it will be nil
-type PSKCallback func([]byte) ([]byte, error)
+type PSKCallback func(hint []byte, localRand [28]byte, remoteRand [28]byte) ([]byte, error)
 
 // ClientAuthType declares the policy the server will follow for
 // TLS Client Authentication.
diff --git a/flight3handler.go b/flight3handler.go
index ab4e730..30b639a 100644
--- a/flight3handler.go
+++ b/flight3handler.go
@@ -196,7 +196,7 @@ func handleServerKeyExchange(_ flightConn, state *State, cfg *handshakeConfig, h
 	}
 	if cfg.localPSKCallback != nil {
 		var psk []byte
-		if psk, err = cfg.localPSKCallback(h.IdentityHint); err != nil {
+		if psk, err = cfg.localPSKCallback(h.IdentityHint, state.localRandom.RandomBytes, state.remoteRandom.RandomBytes); err != nil {
 			return &alert.Alert{Level: alert.Fatal, Description: alert.InternalError}, err
 		}
 		state.IdentityHint = h.IdentityHint
diff --git a/flight4handler.go b/flight4handler.go
index 404f7d1..c2618da 100644
--- a/flight4handler.go
+++ b/flight4handler.go
@@ -107,7 +107,7 @@ func flight4Parse(ctx context.Context, c flightConn, state *State, cache *handsh
 		var preMasterSecret []byte
 		if state.cipherSuite.AuthenticationType() == CipherSuiteAuthenticationTypePreSharedKey {
 			var psk []byte
-			if psk, err = cfg.localPSKCallback(clientKeyExchange.IdentityHint); err != nil {
+			if psk, err = cfg.localPSKCallback(clientKeyExchange.IdentityHint, state.localRandom.RandomBytes, state.remoteRandom.RandomBytes); err != nil {
 				return 0, &alert.Alert{Level: alert.Fatal, Description: alert.InternalError}, err
 			}
 			state.IdentityHint = clientKeyExchange.IdentityHint
